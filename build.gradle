buildscript {
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.5.7"
        classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.+'
    }
}

plugins {
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

ext {
    group = 'io.orkes.conductor'
    appVersion = '0.0.1-SNAPSHOT'
    springBootVersion = '2.5.6'

    versions = [
            revConductor            : '3.13.8',
            revTestContainer        : '1.17.2',
            revGuava                : '32.0.0-jre',
            revLog4j                : '2.17.1',
            revJedis                : '3.8.0',
            revMockServerClient     : '5.12.0',
            revCommonsLang          : '3.12.0',
            revLombok               : '1.18.24',
            revLucene               : '7.7.3',
            revSpectator            : '0.122.0',
            revJsonPath             : '2.8.0',
            revOpenapi              : '1.7.+',
            revAwsSdk               : '1.12.549',
            revProtoBuf             : '3.16.3',
            revRarefiedRedis        : '0.0.17',
            revOrkesProtos          : '0.9.2',
            revOrkesQueues          : '1.0.6',
            ioGRPC                  : '1.53.0'
    ]
}

def relVersion = System.getenv('REL_VER')
if (relVersion) {
    println "Inferred version from env variable 'REL_VER': $relVersion"
    appVersion = relVersion
}

subprojects {

    group = 'io.orkes.conductor'
    version = "${appVersion}"

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'com.diffplug.spotless'

    repositories {
        mavenCentral()
        mavenLocal()
    }

    java {
        withSourcesJar()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        testCompileOnly {
            extendsFrom annotationProcessor
        }
        all {
            exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
            exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        }
    }

    dependencies {

        implementation('net.minidev:json-smart') {
            version {
                strictly '2.4.10'
            }
        }

        implementation 'com.amazonaws:aws-java-sdk-s3:1.12.548'
        implementation "redis.clients:jedis:${versions.revJedis}"

        implementation "org.apache.logging.log4j:log4j-core:${versions.revLog4j}!!"
        implementation "org.apache.logging.log4j:log4j-api:${versions.revLog4j}!!"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${versions.revLog4j}!!"
        implementation "org.apache.logging.log4j:log4j-jul:${versions.revLog4j}!!"
        implementation "org.apache.logging.log4j:log4j-web:${versions.revLog4j}!!"
        implementation "org.apache.logging.log4j:log4j-to-slf4j:${versions.revLog4j}!!"

        compileOnly "org.projectlombok:lombok:${versions.revLombok}"
        annotationProcessor "org.projectlombok:lombok:${versions.revLombok}"
        testAnnotationProcessor "org.projectlombok:lombok:${versions.revLombok}"
        implementation "org.apache.commons:commons-lang3:${versions.revCommonsLang}"
    }

    allprojects {
        configurations.all {
            resolutionStrategy.eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == 'com.fasterxml.jackson.core') {
                    details.useVersion '2.15.2'
                }
                if (details.requested.group == 'com.fasterxml.jackson.dataformat') {
                    details.useVersion '2.15.2'
                }
                if (details.requested.group == 'org.yaml') {
                    details.useVersion '2.2'
                }
                if (details.requested.group == 'io.netty' && details.requested.version == '4.1.70.Final') {
                    details.useVersion "4.1.94.Final"
                }
            }
        }
    }

    dependencyManagement {
        imports {
            mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events = ["SKIPPED", "FAILED"]
            exceptionFormat = "full"
            showStandardStreams = false
        }
    }


    compileJava {
        sourceCompatibility = 11
        targetCompatibility = 11
    }

    spotless {
        java {
            googleJavaFormat().aosp()
            removeUnusedImports()
            importOrder('java', 'javax', 'org', 'com.netflix', 'io.orkes','', '\\#com.netflix', '\\#')
            licenseHeaderFile("$rootDir/licenseheader.txt")
        }
    }
    build.dependsOn(spotlessApply)


    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name = 'Orkes Conductor Community'
                    description = 'Orkes supported version of open source Netflix Conductor'
                    url = 'https://github.com/orkes-io/orkes-conductor-community'
                    scm {
                        connection = 'scm:git://github.com/orkes-io/orkes-conductor-community.git'
                        developerConnection = 'scm:git://github.com/orkes-io/orkes-conductor-community.git'
                        url = 'https://github.com/orkes-io/orkes-conductor-community'
                    }
                    licenses {
                        license {
                            name = 'Apache 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
                            organization = 'Orkes'
                            organizationUrl = 'https://orkes.io'
                            name = 'Orkes Development Team'
                            email = 'developers@orkes.io'
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                if (project.hasProperty("mavenCentral")) {
                    println "Publishing to Sonatype Repository"
                    url = "https://s01.oss.sonatype.org/${project.version.endsWith('-SNAPSHOT') ? "content/repositories/snapshots/" : "service/local/staging/deploy/maven2/"}"
                    credentials {
                        username project.properties.username
                        password project.properties.password
                    }
                }
            }
        }

        def signingKeyId = findProperty('signingKeyId')
        if(signingKeyId) {
            println 'Signing the artifact with keys'
            signing {
                def signingKey = findProperty('signingKey')
                def signingPassword = findProperty('signingPassword')
                if (signingKeyId && signingKey && signingPassword) {
                    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
                }

                sign publishing.publications
            }
        }

    }
}
