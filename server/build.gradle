plugins {
    id 'org.springframework.boot'
}
jar {
    enabled = true
}
dependencies {

    implementation "org.conductoross:conductor-common:${versions.revConductor}"
    implementation "org.conductoross:conductor-core:${versions.revConductor}"
    implementation "org.conductoross:conductor-redis-lock:${versions.revConductor}"
    implementation "org.conductoross:conductor-grpc:${versions.revConductor}"
    implementation "org.conductoross:conductor-rest:${versions.revConductor}"
    implementation "org.conductoross:conductor-redis-concurrency-limit:${versions.revConductor}"

    implementation "org.conductoross:conductor-http-task:${versions.revConductor}"
    implementation "org.conductoross:conductor-awss3-storage:${versions.revConductor}"
    implementation "org.conductoross:conductor-awssqs-event-queue:${versions.revConductor}"
    implementation "org.conductoross:conductor-json-jq-task:${versions.revConductor}"
    implementation "org.conductoross:conductor-amqp:${versions.revConductor}"
    implementation "org.conductoross:conductor-nats:${versions.revConductor}"
    implementation "org.conductoross:conductor-kafka:${versions.revConductor}"
    implementation "org.conductoross:conductor-metrics:${versions.revConductor}"

    implementation "io.orkes.queues:orkes-conductor-queues:${versions.revOrkesQueues}"
    implementation project(":orkes-conductor-archive")
    implementation project(":orkes-conductor-persistence")

    implementation "io.orkes.conductor:orkes-conductor-common-protos:${versions.revOrkesProtos}"

    implementation "org.springdoc:springdoc-openapi-ui:${versions.revOpenapi}"

    //Cache
    implementation "com.google.guava:guava:${versions.revGuava}"


    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //protobuf
    implementation "com.google.protobuf:protobuf-java:${versions.revProtoBuf}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'com.netflix.spectator:spectator-reg-micrometer'
    implementation "io.micrometer:micrometer-registry-prometheus:1.7.5"
    implementation "io.micrometer:micrometer-core:1.11.4"



//    implementation "com.netflix.spectator:spectator-reg-metrics3:${revSpectator}"
//    implementation "com.netflix.spectator:spectator-reg-micrometer:${revSpectator}"
//    implementation "io.prometheus:simpleclient:${revPrometheus}"
//    implementation "io.micrometer:micrometer-registry-prometheus:${revMicrometer}"




    implementation "com.jayway.jsonpath:json-path:${versions.revJsonPath}"
    implementation "redis.clients:jedis:${versions.revJedis}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.hamcrest:hamcrest'
    testImplementation "org.awaitility:awaitility:3.1.6"
    testImplementation 'net.java.dev.jna:jna-platform:5.8.0' //M1 fix for testcontainers
    testImplementation 'com.jayway.jsonpath:json-path-assert:2.6.0'
    testImplementation "org.testcontainers:postgresql:${versions.revTestContainer}"
    testImplementation "org.testcontainers:kafka:1.17.1"
}

test {
    useJUnitPlatform()
}

bootJar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
    archiveFileName = "${archiveBaseName.get()}-boot.${archiveExtension.get()}"

}

publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
}

springBoot {
    buildInfo()
}